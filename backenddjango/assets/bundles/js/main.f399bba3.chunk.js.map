{"version":3,"sources":["components/logo.svg","components/App.js","components/Calendar/Utils.js","components/Calendar/Table.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","alt","Component","range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","namor","generate","words","numbers","lastName","age","floor","visits","progress","status","Logo","style","margin","display","flexWrap","alignItems","justifyContent","href","width","Tips","textAlign","CalendarTable","React","_this3","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","arguments","length","undefined","map","d","objectSpread","children","makeData","es","columns","Header","accessor","id","defaultPageSize","Utils_Tips","Utils_Logo","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","Table","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.f399bba3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to landing page</h1>\n        </header>\n        <p className=\"App-intro\">\n            A react app with django as a backend.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\n//random name generator\nimport namor from \"namor\";\n//import \"./index.css\";\n\nconst range = len => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst newPerson = () => {\n  const statusChance = Math.random();\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    lastName: namor.generate({ words: 1, numbers: 0 }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? \"relationship\"\n        : statusChance > 0.33 ? \"complicated\" : \"single\"\n  };\n};\n\nexport function makeData(len = 5553) {\n  return range(len).map(d => {\n    return {\n      ...newPerson(),\n      children: range(10).map(newPerson)\n    };\n  });\n}\n\nexport const Logo = () =>\n  <div style={{ margin: '1rem auto', display: 'flex', flexWrap: 'wrap', alignItems: 'center', justifyContent: 'center'}}>\n    For more examples, visit {''}\n  <br />\n    <a href=\"https://github.com/react-tools/react-table\" >\n      <img\n        src=\"https://github.com/react-tools/media/raw/master/logo-react-table.png\"\n        style={{ width: `150px`, margin: \".5em auto .3em\" }}\n      />\n    </a>\n  </div>;\n\nexport const Tips = () =>\n  <div style={{ textAlign: \"center\" }}>\n    <em>Tip: Hold shift when sorting to multi-sort!</em>\n  </div>;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { makeData, Logo, Tips } from \"./Utils\";\n\n// Import React Table\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\n\nclass OneWeek extends React.Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    value: null,\n  };\n}\nrender() {\n  return (\n    <button\n      className=\"square\"\n      onClick={() => this.props.onClick()}\n    >\n      {this.props.value}\n    </button>\n  );\n}\n}\nclass CalendarTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: makeData()\n    };\n  }\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ReactTable\n          data={data}\n          columns={[\n            {\n              Header: \"Name\",\n              columns: [\n                {\n                  Header: \"First Name\",\n                  accessor: \"firstName\"\n                },\n                {\n                  Header: \"Last Name\",\n                  id: \"lastName\",\n                  accessor: d => d.lastName\n                }\n              ]\n            },\n            {\n              Header: \"Info\",\n              columns: [\n                {\n                  Header: \"Age\",\n                  accessor: \"age\"\n                },\n                {\n                  Header: \"Status\",\n                  accessor: \"status\"\n                }\n              ]\n            },\n            {\n              Header: 'Stats',\n              columns: [\n                {\n                  Header: \"Visits\",\n                  accessor: \"visits\"\n                }\n              ]\n            }\n          ]}\n          defaultPageSize={10}\n          className=\"-striped -highlight\"\n        />\n        <br />\n        <Tips />\n        <Logo />\n      </div>\n    );\n  }\n}\nexport default CalendarTable;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport CalendarTable from './components/Calendar/Table'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<CalendarTable />, document.getElementById('calendar'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}